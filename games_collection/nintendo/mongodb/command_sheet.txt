CREATE TABLE [dbo].[Dates]
(
    [Id] INT NOT NULL PRIMARY KEY, 
    [Game] VARCHAR(MAX) NULL, 
    [Console] VARCHAR(MAX) NULL, 
    [PurchaseDate] DATE NULL
);

CREATE TABLE [dbo].[Finances]
(
    [Id] INT NOT NULL PRIMARY KEY, 
    [Game] VARCHAR(MAX) NULL, 
    [FullPrice] FLOAT NULL, 
    [SalePrice] FLOAT NULL, 
    [Savings] FLOAT NULL
);

CREATE TABLE [dbo].[Origins]
(
    [Id] INT NOT NULL PRIMARY KEY, 
    [Game] VARCHAR(MAX) NULL, 
    [Console] VARCHAR(MAX) NULL, 
    [Developer] VARCHAR(MAX) NULL, 
    [Country] VARCHAR(MAX) NULL
);

Section 1. Querying Data
    SELECT FROM – show you how to use simple SELECT FROM statements to
                  query the data from a single table:
        select * from Dates;
        select Game from Finances;
        select Game, Console, PurchaseDate from Dates;

    SELECT – how to use the SELECT statement without referencing a table:
        select now();
        select concat('Jonny', ' ', 'Cool');
        select concat('Jonny', ' ', 'Cool') as Name;

Section 2. Sorting Data
    ORDER BY – show you how to sort the result set using ORDER BY clause.
               The custom sort order with the FIELD function will be
               also covered.
        select Developer, Country from Origins order by Developer;
        select Developer, Country from Origins order by Developer DESC;
        select Developer, Country from Origins order by Developer DESC, Country ASC;
        select FullPrice, SalePrice, FullPrice - SalePrice AS MoneySaved from Finances order by MoneySaved DESC;

Section 3. Filtering Data
    WHERE – learn how to use the WHERE clause to filter rows based on
            specified conditions:
        select * from Dates where Game = 'Yakuza';
        select * from Finances where Game = 'Yakuza' AND Savings > 10;
        select Developer, Country from Origins where Developer = 'Naughty Dog' OR Game = 'Naughty Bear' order by Game, Developer;
        select * from Finances where Savings between 5 AND 20 order by Savings;
        select Game, Console from Origins where Game LIKE '%evil' order by Console;
        select * from Dates where Game != 'Crash Bandicoot';
        select * from Finances where SalePrice >= 30;

    SELECT DISTINCT – show you how to use the DISTINCT operator in the
                      SELECT statement to eliminate duplicate rows in a
                      result set:
        select DISTINCT Country from Origins order by Country;

    AND – introduce you to the AND operator to combine Boolean
          expressions to form a complex condition for filtering data:
        select Game, FullPrice, SalePrice, Savings from Finances where SalePrice <= 19.99 AND Savings = 9.99;
        select Game, FullPrice, SalePrice, Savings from Finances where SalePrice <= 19.99 AND Savings = 9.99 AND FullPrice BETWEEN (29.99 AND 59.99);

    OR – introduce you to the OR operator and show you how to combine
         the OR operator with the AND operator to filter data:
        select Game, Country from Origins where Country = 'England' OR Country = 'Sweden';
        select Game, Developer, Country from Origins where (Country = 'England' OR Country = 'Sweden') AND Developer = 'TT Games';

    IN – show you how to use the IN operator in the WHERE clause to
         determine if a value matches any value in a set:
        select Game, Country from Origins where Country IN ('Japan', 'China');
        select Game, Country from Origins where Country = 'Japan' OR Country = 'China');

    NOT IN – negate the IN operator using the NOT operator to check if a
             value doesn’t match any value in a set:
        select * from Origins where Country NOT IN ('USA', 'Australia') order by Developer;

    BETWEEN & NOT BETWEEN – show you how to query data based on a range
                            using BETWEEN operator:
        select Game, FullPrice, SalePrice, Savings from Finances where FullPrice BETWEEN 49.99 AND 79.99;
        select Game, FullPrice, SalePrice, Savings from Finances where FullPrice >= 49.99 AND FullPrice <= 79.99;
        select Game, FullPrice, SalePrice, Savings from Finances where FullPrice NOT BETWEEN 19.99 AND 39.99;
        select Game, Console, PurchaseDate from Dates where PurchaseDate BETWEEN CAST('2020-01-01' AS DATE) AND CAST('2020-12-31');

    LIKE & NOT LIKE – provide you with technique to query data based on
                      a pattern:
        select * from Dates where Game LIKE 'a%';
        select * from Dates where Game LIKE '%ed';
        select * from Dates where Game LIKE '%bug%';
        select * from Dates where Game LIKE 'R_t';
        select * from Dates where Game NOT LIKE 's%';

    LIMIT – use LIMIT to constrain the number of rows returned by SELECT
            statement:
        select * from Finances order by Savings DESC LIMIT 10;
        select * from Finances order by Savings, SalePrice LIMIT 5;
        select COUNT(*) from Dates;

    IS NULL – test whether a value is NULL or not by using IS NULL
              operator.
        select * from Origins where Developer IS NULL order by Country;

Section 4. Joining Tables
    Table & Column Aliases – introduce you to table and column aliases:
        select CONCAT_WS(', ', Developer, Country) AS 'Background' from Origins order by 'Background';
        select Game 'Video Game', SUM(FullPrice - SalePrice) total from Finances group by 'Video Game' HAVING total > 50;
        select * from Dates d;
        select d.Game, d.PurchaseDate from Dates d ORDER BY d.Game;
        select Game, COUNT(f.Savings) total from Dates d INNER JOIN Finances f ON d.Game = f.Game GROUP BY Game ORDER BY total DESC;

    Joins – give you an overview of joins supported in MySQL including
            inner join, left join, and right join:
        select d.Game, d.Console AS PlayStation, o.Developer, o.Country AS Origin from Dates d INNER JOIN Origins o ON o.Console = d.Console;
        select d.Game, d.Console AS PlayStation, o.Developer, o.Country AS Origin from Dates d INNER JOIN Origins o USING(Console);

    INNER JOIN – query rows from a table that has matching rows in
                 another table:
        select Game, Console from Dates d INNER JOIN Savings f ON d.Game = f.Game;
        select d.Game, d.Console from Dates d INNER JOIN Country o ON d.Game = o.Game GROUP BY Console;
        select orderNumber, orderDate, orderLineNumber, productName, quantityOrdered, priceEach FROM orders INNER JOIN orderdetails USING (orderNumber) INNER JOIN products USING (productCode) ORDER BY orderNumber, orderLineNumber;

    LEFT JOIN – return all rows from the left table and matching rows
                from the right table or null if no matching rows found
                in the right table.
        select f.Game, f.SalePrice AS Bargain?, d.Console, d.PurchaseDate AS When? from Finances f LEFT JOIN Dates d USING(Game);

    RIGHT JOIN – return all rows from the right table and matching rows
                 from the left table or null if no matching rows found
                 in the left table:
        select f.Game, f.SalePrice AS Bargain?, d.Console, d.PurchaseDate AS When? from Finances f RIGHT JOIN Dates d on d.Game = f.Game;
        select f.Game, f.SalePrice AS Bargain?, d.Console, d.PurchaseDate AS When? from Finances f RIGHT JOIN Dates d USING(Game);

    CROSS JOIN – make a Cartesian product of rows from multiple tables:
        SELECT store_name, product_name, SUM(quantity * price) AS revenue FROM sales INNER JOIN products ON products.id = sales.product_id INNER JOIN stores ON stores.id = sales.store_id GROUP BY store_name, product_name;
        select store_name, product_name from stores AS a CROSS JOIN products AS b;

Section 5: Grouping Data
        GROUP BY – show you how to group rows into groups based on
                   columns or expressions:
            select Console from Dates group by Console;
            select distinct Country from Origins;
            select Game, SUM(FullPrice - SalePrice) AS Bargain from Finances INNER JOIN PurchaseDate USING(Game) GROUP BY Game;
            select YEAR(PurchaseDate) AS year FROM Dates INNER JOIN Savings USING(Game) GROUP BY YEAR(PurchaseDate);

        HAVING – filter the groups by a specific condition:
            select Game 'Video Game', SUM(FullPrice - SalePrice) total from Finances group by 'Video Game' HAVING total > 50;

Section 6: Subqueries
        SUBQUERY - show you how to nest a query (inner query) within
                   another query (outer query) and use the result of the
                   inner query for the outer query:
            SELECT Game, Console from Origins where Developer IN (SELECT Country from Origins WHERE Country = 'Denmark');
            SELECT * from Finances WHERE Savings = (SELECT MAX(Savings) from Finances);
            SELECT * FROM Finances WHERE Savings > (SELECT AVG(Savings) from Finances);

        EXISTS - test for the existence of rows:
            select * FROM Dates WHERE EXISTS(SELECT * FROM Dates WHERE Game = 'Yakuza');

Section 7: Modifying Data in MySQL
        INSERT - use various forms of the INSERT statement to insert
                 data into a table:
            INSERT INTO Dates(Id, Game, Console, PurchaseDate) VALUES(862,'Benji Benventures','PS5','2023-04-01');
            INSERT INTO Dates(Id, Game, Console, PurchaseDate) VALUES(862,'Benji Benventures','PS5',CURRENT_DATE());
            INSERT INTO Dates(Id, Game, Console, PurchaseDate) VALUES(862,'Benji Benventures','PS5',CURRENT_DATE()),(863,'Benji Benventures 2: Benjlectric Benjiloo','PS5',CURRENT_DATE());

        INSERT INTO SELECT - insert data into a table from the result
                             set of a query:
            INSERT INTO Finances(*) SELECT PurchaseDate FROM Dates WHERE YEAR = '2022';

        UPDATE – learn how to use UPDATE statement and its options to update
                 data in database tables:
            UPDATE Origins SET Developer = 'Team Asobi' WHERE Id = 7;
            SELECT * FROM Origins WHERE Id = 7;
            UPDATE Origins SET Developer = REPLACE(Developer,'Japan Studio','Team Asobi') WHERE Country = 'Japan';

        UPDATE JOIN - show you how to perform cross-table update using UPDATE
                      JOIN statement with INNER JOIN and LEFT JOIN:
            UPDATE 